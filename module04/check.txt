
------------------------------------------

ex00
As usual, there has to be a main function that contains enough tests to prove the program works as required. If there isn't, do not grade this exercise. If any non-interface class is not in Coplien's form, do not grade this exercise.

[YES]------------------------------------------

Thorough testing
There are tests in the main with derived classes other than Peon, and
everything works well with them.

[YES]------------------------------------------

I want sheeps !
The Victim can getPolymorphed() const, with the correct output. The
Sorcerer can polymorph(Victim const &) const.

[YES]------------------------------------------

Destructor chaining
The destructors in Victim and derived are virtual.

[YES]------------------------------------------

Easy subclass
There is a Peon class that inherits publicly from Victim. It has
the correct outputs.

[YES]------------------------------------------

Victim
There is a Victim class. It has a name. The required outputs
on construction and destruction are present.
The required overload of operator << to ostream is present and works
correctly

[YES]------------------------------------------
Sorcerer
There is a Sorcerer class. It has a name and a title. It has
a constructor with name and title.
It cannot be instanciated without parameters.
That means either the default constructor must be private, or it must be
declared but non-implemented, to comply with Coplien's form.
The required outputs on construction and destruction are present.
The required overload of operator << to ostream is present and works correctly.


ex01
As usual, there has to be a main function that contains enough tests to prove the program works as required. If there isn't, do not grade this exercise. If any non-interface class is not in Coplien's form, do not grade this exercise.

[YES]-----------------------------------------

Concrete enemies
There are concrete SuperMutant and RadScorpion enemies (That inherit from Enemy, obviously)
They have the required attributes.
The SuperMutant has the required overload of takeDamage() and it works as required.

[YES]------------------------------------------

Character
There is a Character class. It has the attributes required by
the subject: name, AP, pointer to AWeapon.
It has the required AP behavior: 40 on start, it looses X AP on attack
depending on the weapon, and recovers 10 AP
with recoverAP up to a maximum of
40. attack(...) fails if there aren't enough
AP.

[YES]------------------------------------------

Concrete weapons
There are concrete PlasmaRifle and PowerFirst weapons. (So, they
inherit from AWeapon)
They have the attributes and attack() outputs specified
by the subject.

[YES]------------------------------------------

Utility and output
The equip() and attack() functions work as required. The << overload
works as required.

[YES]------------------------------------------

Destructor chaining 2
The destructors in AWeapon and its derived classes are virtual.

[YES]------------------------------------------

Thorough testing
There are tests in the main with more derived weapons and more derived enemies. "

[YES]------------------------------------------

Destructor chaining AGAIN
The destructors in Enemy and its derived classes are virtual.

[YES]------------------------------------------

Enemy
There is an Enemy class. It has the attributes required by the
subject: type, number of HP
Its member functions are implemented coherently.
It has the required check in takeDamage to prevent going under 0 HP.

[YES]------------------------------------------

Weapon
There is an AWeapon class. It is abstract (attack() must be a
pure virtual function).
It has the attributes required by the subject : name,
damage, AP cost.
Its member functions are implemented coherently

ex02
As usual, there has to be a main function that contains enough tests to prove the program works as required. If there isn't, do not grade this exercise. If any non-interface class is not in Coplien's form, do not grade this exercise.

[YES]------------------------------------------

Interfaces
The ISquad and ISpaceMarine interfaces are present and are exactly like
the ones in the subject.

[YES]------------------------------------------

Concrete squad
The Squad class is present and inherits from ISquad Its member
functions work as required.
Its destructor destroys the contained units.

[YES]------------------------------------------

Concrete units
The TacticalMarine and AssaultTerminator classes are present and inherit
from ISpaceMarine.
Their member functions work as required.

[YES]------------------------------------------

Assignment and copy
The copy and assignation behaviours of the Squad are as the subject required.
That means deep copy, and upon assignation, exiting units must be
destroyed before they are replaced.


ex03
As usual, there has to be a main function that contains enough tests to prove the program works as required. If there isn't, do not grade this exercise. If any non-interface class is not in Coplien's form, do not grade this exercise.

[YES]------------------------------------------

Interfaces
The ICharacter and IMateriaSource interfaces are present and are
exactly like in the subject.

[YES]------------------------------------------

Source
The MateriaSource class is present and implements IMateriaSource. The
member functions work as intended.

[YES]------------------------------------------

Concrete materia
There are concrete Ice and Cure classes that inherit from AMateria Their
clone() method is correctly implemented. Their outputs are correct.

[YES]------------------------------------------

Character
The Character class is present and implements ICharacter. It has
an inventory of 4 materias.
The member functions are implemented as the subject requires.

[YES]------------------------------------------

Materia base
There is an AMateria class. It has a type. It's abstract (clone is pure).
The XP system is implemented as the subject requires.

[YES]------------------------------------------

Assignation and copy
The copy and assignation of a Character are implemented as required (=
deep copy, very much like the previous exercise).
