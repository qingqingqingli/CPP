EX00

- #pragma once

// Specifies that the compiler includes the header file only once, when compiling a source code file

- Default constructor. If you give values to the parameters with (=""), it will be constructed automatically. In this way, you don't need to have a separate constructor

- With operator overload, you can immediately return the o stream. It will save a line

Return o <<

EX01

- SuperMutant::takeDamage can use the base class takedamage function. Function overload is also function overcharge. You can build on the base function. In this way, you can simplify the code.

- If the inherited class needs to access the base class's attributes, it's best to set the base class attributes protected. So the inherited class can still use them. If you give two sets of attributes in base and inherited class, there are essentially two sets of attributes. When you change one, you didn't change the other. When you typecase one to the other, there will be problems.

Ex02

- virtual destructor in interface is required. Because even though it cannot be instantiated, it still exist in derived class. So if you delete the derived class, it will not destruct the interface if there's no virtual destructor in interface

- Another way to handle is to create an array of 50 elements for the squad. If the squad gets larger than that, then delete the old ones and create new ones.

- Testing: delete the original squad so if the copied squad still works, then the deep copy worked.

Ex03

- New Amateria*[4]() -> set values of each Amateria[i] to NULL automatically

- Think about the encapsulation of a class. If you return the pointer to the original value of your class, other class can modify your value. So the safe option is to return a copy of the value, so no matter what other class does with your class, your original class is always safe.
